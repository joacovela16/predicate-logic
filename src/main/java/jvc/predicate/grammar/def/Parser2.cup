package jvc.predicate.grammar.def;
import java_cup.runtime.*;
import jvc.predicate.engine.evaluator.impl.arithmetic.*;
import jvc.predicate.engine.evaluator.impl.comparation.*;
import jvc.predicate.engine.evaluator.impl.logic.*;
import jvc.predicate.engine.evaluator.impl.runtime.*;
import jvc.predicate.engine.evaluator.*;
import jvc.predicate.engine.types.*;
import jvc.predicate.engine.types.impl.*;

parser code
{:

:}

non terminal BinaryEvaluator arithmetic_operator_stmt,
                             arithmetic_stmt_rec,
                             comparator_op_stmt,
                             comparator_stmt_rec,
                             logic_stmt_op_bin,
                             logic_stmt_rec;

non terminal  atomic_stmt;
non terminal arithmetic_stmt, comparator_stmt, logic_stmt, not_op;

non terminal stmt, exprs_stmt,  comp_stmt, forall_stmt, exists_stmt,not_op_rec,
              epsilon, exprs_stmt_rec;

terminal PLType INT_NUMBER;
terminal PLType FLOAT_NUMBER;
terminal PLType BOOLEAN;
terminal PLType STRING;

terminal FORALL, EXISTS;
terminal AND, OR, NOT, PLUS_OP, MINUS_OP, TIME_OP, EQUAL_OP, NOT_EQUAL_OP;
terminal LT_OP, GT_OP, LE_OP, GE_OP;
terminal IDENTIFIER;
terminal PUNTO, DOS_PUNTOS, AP_CURVO, CP_CURVO, A_LLAVES, C_LLAVES;


start with exprs_stmt;

exprs_stmt ::=  logic_stmt | logic_stmt:comp {: System.out.println(comp); :} exprs_stmt;

comp_stmt ::= forall_stmt | exists_stmt;

forall_stmt ::= FORALL IDENTIFIER DOS_PUNTOS IDENTIFIER A_LLAVES stmt C_LLAVES;

exists_stmt ::= EXISTS IDENTIFIER DOS_PUNTOS A_LLAVES stmt C_LLAVES ;

logic_stmt ::=  not_op:comp logic_stmt_rec:log
                {:

                    System.out.println(comp);

                :};

logic_stmt_rec ::=  epsilon
                    | logic_stmt_op_bin:op not_op logic_stmt_rec
                   {:
                        RESULT = op;
                   :}
                   | logic_stmt_op_bin:op AP_CURVO not_op logic_stmt_rec CP_CURVO
                      {:

                      :};

logic_stmt_op_bin ::=
                  AND
                  {:
                        RESULT = new AndEvaluator();
                  :}
                  | OR
                  {:
                        RESULT = new OrEvaluator();
                  :};

not_op ::= comparator_stmt  not_op_rec ;

not_op_rec ::=
            epsilon
            | NOT AP_CURVO exprs_stmt CP_CURVO
            {:

                //op.setEvaluator(rec);

                //RESULT = op;
            :};

comparator_stmt ::=  arithmetic_stmt  comparator_stmt_rec:rec
                    {:
                    :};

comparator_stmt_rec ::= epsilon
                        | comparator_op_stmt:op arithmetic_stmt comparator_stmt_rec
                        {:

                        :};

comparator_op_stmt ::=  EQUAL_OP
                        {: RESULT = new EqualEvaluator(); :}
                       | NOT_EQUAL_OP
                       | LT_OP
                       | GT_OP
                       | LE_OP
                       | GE_OP;

arithmetic_stmt ::= atomic_stmt:atom arithmetic_stmt_rec:rec
                    {:
                    :};

arithmetic_stmt_rec ::=  epsilon
                        | arithmetic_operator_stmt:op atomic_stmt:value arithmetic_stmt_rec
                        {:
                        :};

arithmetic_operator_stmt ::= PLUS_OP
                             {: RESULT = new PlusEvaluator(); :}
                             | MINUS_OP
                             | TIME_OP ;

atomic_stmt ::= IDENTIFIER |
                IDENTIFIER AP_CURVO IDENTIFIER CP_CURVO
                | STRING:n
                {:
                    RESULT = new VariableEvaluator(n);
                :}
                | INT_NUMBER:n
                {:
                    RESULT = new VariableEvaluator(n);
                :}
                | FLOAT_NUMBER:n
                {:
                    RESULT = new VariableEvaluator(n);
                :}
                | BOOLEAN:n
                {:
                    RESULT = new VariableEvaluator(n);
                :};


epsilon ::= {: RESULT = null; :} ;