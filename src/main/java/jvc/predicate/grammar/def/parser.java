
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package jvc.predicate.grammar.def;

import java_cup.runtime.*;
import jvc.predicate.engine.evaluator.impl.arithmetic.*;
import jvc.predicate.engine.evaluator.impl.comparation.*;
import jvc.predicate.engine.evaluator.impl.logic.*;
import jvc.predicate.engine.evaluator.impl.runtime.*;
import jvc.predicate.engine.evaluator.*;
import jvc.predicate.engine.types.*;
import jvc.predicate.engine.types.impl.*;
import jvc.predicate.engine.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\007\003\000\002\006" +
    "\003\000\002\012\003\000\002\012\004\000\002\014\003" +
    "\000\002\014\005\000\002\010\003\000\002\010\011\000" +
    "\002\011\003\000\002\011\011\000\002\015\003\000\002" +
    "\015\005\000\002\020\003\000\002\020\005\000\002\003" +
    "\003\000\002\003\003\000\002\016\003\000\002\016\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\013\003\000\002\013\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\017\003\000\002\017\005\000\002\021\003" +
    "\000\002\021\005\000\002\021\006\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\023\003\000\002\023\005\000\002\022" +
    "\003\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\024\004\011\005\004\006\015\007\016\010" +
    "\006\011\017\014\007\032\013\037\010\001\002\000\042" +
    "\002\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\032\uffdd\033\uffdd\001\002\000\042\002\uffe2\012" +
    "\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\032" +
    "\uffe2\033\uffe2\001\002\000\004\034\103\001\002\000\024" +
    "\004\011\005\004\006\015\007\016\010\006\011\017\014" +
    "\007\032\013\037\010\001\002\000\042\002\uffdf\012\uffdf" +
    "\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\032\uffdf" +
    "\033\uffdf\001\002\000\042\002\uffde\012\uffde\013\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\032\uffde\033\uffde\001" +
    "\002\000\004\002\101\001\002\000\024\004\011\005\004" +
    "\006\015\007\016\010\006\011\017\014\007\032\013\037" +
    "\010\001\002\000\042\002\uffe4\012\uffe4\013\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\032\034\033\uffe4\001\002" +
    "\000\042\002\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\032\uffdc\033\uffdc\001\002\000\042\002" +
    "\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\032\uffdb\033\uffdb\001\002\000\004\034\063\001\002" +
    "\000\004\002\000\001\002\000\010\002\ufffa\013\ufffa\033" +
    "\ufffa\001\002\000\036\002\ufff0\012\ufff0\013\ufff0\015\055" +
    "\016\057\020\060\021\056\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\033\ufff0\001\002\000\026\002\ufff4" +
    "\012\ufff4\013\ufff4\022\047\023\052\024\050\025\053\026" +
    "\ufff4\027\ufff4\033\ufff4\001\002\000\016\002\ufff6\012\ufff6" +
    "\013\ufff6\026\043\027\045\033\ufff6\001\002\000\012\002" +
    "\ufff8\012\041\013\ufff8\033\ufff8\001\002\000\010\002\ufffe" +
    "\013\037\033\ufffe\001\002\000\040\002\uffea\012\uffea\013" +
    "\uffea\015\uffea\016\uffea\017\032\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\033\uffea\001" +
    "\002\000\010\002\ufffc\013\ufffc\033\ufffc\001\002\000\006" +
    "\002\uffff\033\uffff\001\002\000\016\004\011\005\004\006" +
    "\015\007\016\032\013\037\010\001\002\000\042\002\uffe3" +
    "\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\032\034\033\uffe3\001\002\000\024\004\011\005\004\006" +
    "\015\007\016\010\006\011\017\014\007\032\013\037\010" +
    "\001\002\000\004\033\036\001\002\000\042\002\uffe0\012" +
    "\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\032" +
    "\uffe0\033\uffe0\001\002\000\022\004\011\005\004\006\015" +
    "\007\016\010\006\011\017\032\013\037\010\001\002\000" +
    "\010\002\ufffb\013\ufffb\033\ufffb\001\002\000\016\004\011" +
    "\005\004\006\015\007\016\032\013\037\010\001\002\000" +
    "\016\002\ufff5\012\ufff5\013\ufff5\026\043\027\045\033\ufff5" +
    "\001\002\000\016\004\ufff2\005\ufff2\006\ufff2\007\ufff2\032" +
    "\ufff2\037\ufff2\001\002\000\016\004\011\005\004\006\015" +
    "\007\016\032\013\037\010\001\002\000\016\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\032\ufff1\037\ufff1\001\002\000\026" +
    "\002\ufff3\012\ufff3\013\ufff3\022\047\023\052\024\050\025" +
    "\053\026\ufff3\027\ufff3\033\ufff3\001\002\000\016\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\032\uffee\037\uffee\001\002\000" +
    "\016\004\uffec\005\uffec\006\uffec\007\uffec\032\uffec\037\uffec" +
    "\001\002\000\016\004\011\005\004\006\015\007\016\032" +
    "\013\037\010\001\002\000\016\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\032\uffed\037\uffed\001\002\000\016\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\032\uffeb\037\uffeb\001\002\000\036" +
    "\002\uffef\012\uffef\013\uffef\015\055\016\057\020\060\021" +
    "\056\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\033\uffef\001\002\000\016\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\032\uffe8\037\uffe8\001\002\000\016\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\032\uffe6\037\uffe6\001\002\000\016\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\032\uffe5\037\uffe5\001\002" +
    "\000\016\004\uffe7\005\uffe7\006\uffe7\007\uffe7\032\uffe7\037" +
    "\uffe7\001\002\000\016\004\011\005\004\006\015\007\016" +
    "\032\013\037\010\001\002\000\040\002\uffe9\012\uffe9\013" +
    "\uffe9\015\uffe9\016\uffe9\017\032\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\033\uffe9\001" +
    "\002\000\004\037\064\001\002\000\006\031\uffda\036\uffda" +
    "\001\002\000\006\031\067\036\066\001\002\000\004\037" +
    "\076\001\002\000\004\041\071\001\002\000\006\035\073" +
    "\036\072\001\002\000\006\035\uffd8\036\uffd8\001\002\000" +
    "\004\041\075\001\002\000\020\004\011\005\004\006\015" +
    "\007\016\011\017\032\013\037\010\001\002\000\010\002" +
    "\ufff7\013\ufff7\033\ufff7\001\002\000\006\035\uffd7\036\uffd7" +
    "\001\002\000\006\031\uffd9\036\uffd9\001\002\000\004\033" +
    "\100\001\002\000\042\002\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\032\uffe1\033\uffe1\001\002" +
    "\000\004\002\001\001\002\000\006\002\ufffd\033\ufffd\001" +
    "\002\000\004\037\064\001\002\000\006\031\105\036\066" +
    "\001\002\000\004\041\071\001\002\000\006\035\107\036" +
    "\072\001\002\000\022\004\011\005\004\006\015\007\016" +
    "\010\006\011\017\032\013\037\010\001\002\000\010\002" +
    "\ufff9\013\ufff9\033\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\034\005\004\006\017\007\011\010\027\011" +
    "\020\012\030\013\021\014\025\015\024\016\022\017\026" +
    "\020\023\021\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\004\010\027\011\020" +
    "\012\101\013\021\014\025\015\024\016\022\017\026\020" +
    "\023\021\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\004\006\076\010\027\011" +
    "\020\012\030\013\021\014\025\015\024\016\022\017\026" +
    "\020\023\021\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\060\001\001\000\004\002" +
    "\050\001\001\000\004\003\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\004\021\032\001\001\000\002" +
    "\001\001\000\032\005\004\006\034\010\027\011\020\012" +
    "\030\013\021\014\025\015\024\016\022\017\026\020\023" +
    "\021\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\004\010\037\011\020\013\021\015\024\016\022" +
    "\017\026\020\023\021\013\001\001\000\002\001\001\000" +
    "\016\005\004\013\021\016\022\017\026\020\041\021\013" +
    "\001\001\000\004\003\043\001\001\000\002\001\001\000" +
    "\014\005\004\013\021\016\045\017\026\021\013\001\001" +
    "\000\002\001\001\000\004\002\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\004\013\053\017\026" +
    "\021\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\004\017" +
    "\061\021\013\001\001\000\002\001\001\000\004\023\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\004\011\073\013" +
    "\021\015\024\016\022\017\026\020\023\021\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\103\001\001\000\002\001\001\000" +
    "\004\022\105\001\001\000\002\001\001\000\024\005\004" +
    "\010\107\011\020\013\021\015\024\016\022\017\026\020" +
    "\023\021\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private PredicateLogic predicateLogic;

    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, PredicateLogic pl) {
        super(s,sf);
        this.predicateLogic = pl;
    }

    public PredicateLogic getPredicateLogic(){return predicateLogic;}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Evaluator start_val = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= expression 
            {
              Evaluator RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator e = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        predicateLogic.setEvaluatorResult(e.eval());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= logical_not_expression 
            {
              Evaluator RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator loe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = loe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // logical_not_expression ::= logical_or_expression 
            {
              Evaluator RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator loe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = loe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_not_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // logical_not_expression ::= NOT logical_not_expression 
            {
              Evaluator RESULT =null;
		Location lnexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lnexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lne = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = EvaluatorBuilder.eval( EvaluatorBuilder.notEval(), lne ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_not_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // logical_or_expression ::= forall_expression 
            {
              Evaluator RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // logical_or_expression ::= logical_or_expression OR forall_expression 
            {
              Evaluator RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator loe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval( loe, EvaluatorBuilder.orEval(), lae );
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // forall_expression ::= exists_expression 
            {
              Evaluator RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ee = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ee; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forall_expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // forall_expression ::= FORALL A_LLAVES parameter DOS_PUNTOS parameter_set C_LLAVES forall_expression 
            {
              Evaluator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		java.util.ArrayList<String> p = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location fexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location fexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator fe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.evalForall(p, ps, fe, predicateLogic);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forall_expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exists_expression ::= logical_and_expression 
            {
              Evaluator RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exists_expression ::= EXIST A_LLAVES parameter DOS_PUNTOS parameter_set C_LLAVES exists_expression 
            {
              Evaluator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		java.util.ArrayList<String> p = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ex = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.evalExist(p, ps, ex, predicateLogic);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // logical_and_expression ::= equality_expression 
            {
              Evaluator RESULT =null;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ioe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ioe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // logical_and_expression ::= logical_and_expression AND equality_expression 
            {
              Evaluator RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ioe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval( lae, EvaluatorBuilder.andEval(), ioe );
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // equality_expression ::= relational_expression 
            {
              Evaluator RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator re = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = re; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // equality_expression ::= equality_expression equality_op relational_expression 
            {
              Evaluator RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator ee = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		BinaryEvaluator op = (BinaryEvaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator re = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval(ee, op, re);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // equality_op ::= EQUAL_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.equalEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // equality_op ::= NOT_EQUAL_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.notEqualEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relational_expression ::= additive_expression 
            {
              Evaluator RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relational_expression ::= relational_expression relational_op additive_expression 
            {
              Evaluator RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator re = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		BinaryEvaluator op = (BinaryEvaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator se = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval(re, op, se);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // relational_op ::= LT_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.ltEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relational_op ::= GT_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.gtEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relational_op ::= LE_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.leEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relational_op ::= GE_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.geEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // additive_expression ::= multiplicative_expression 
            {
              Evaluator RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator me = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // additive_expression ::= additive_expression additive_op multiplicative_expression 
            {
              Evaluator RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator ae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		BinaryEvaluator op = (BinaryEvaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator me = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT  = EvaluatorBuilder.eval(ae, op, me);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // additive_op ::= PLUS_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.plusEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // additive_op ::= DIV_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.divEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // additive_op ::= MOD_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.modEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // additive_op ::= MINUS_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.minusEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // multiplicative_expression ::= postfix_expression 
            {
              Evaluator RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator pe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // multiplicative_expression ::= multiplicative_expression TIME_OP postfix_expression 
            {
              Evaluator RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator me = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ce = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT  = EvaluatorBuilder.eval(me, EvaluatorBuilder.timeEval() , ce);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // postfix_expression ::= primary_expression 
            {
              Evaluator RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator pe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = pe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // postfix_expression ::= AP_CURVO expression CP_CURVO 
            {
              Evaluator RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Evaluator e = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // postfix_expression ::= postfix_expression AP_CURVO expression CP_CURVO 
            {
              Evaluator RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Evaluator pe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Evaluator e = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

        if (pe!=null) System.out.println(">>>>>>>>>> postfix_expression");

        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primary_expression ::= IDENTIFIER 
            {
              Evaluator RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(id, predicateLogic); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primary_expression ::= INT_NUMBER 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		PLType c = (PLType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primary_expression ::= FLOAT_NUMBER 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		PLType c = (PLType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primary_expression ::= BOOLEAN 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		PLType c = (PLType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primary_expression ::= STRING 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		PLType c = (PLType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter ::= IDENTIFIER 
            {
              java.util.ArrayList<String> RESULT =null;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new java.util.ArrayList<String>(){{add(sn);}};
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter ::= parameter COMA IDENTIFIER 
            {
              java.util.ArrayList<String> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ps.add(sn);
        RESULT = ps;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter_set ::= SETNAME 
            {
              java.util.ArrayList<String> RESULT =null;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new java.util.ArrayList<String>(){{add(sn);}};
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_set",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter_set ::= parameter_set COMA SETNAME 
            {
              java.util.ArrayList<String> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ps.add(sn);
        RESULT = ps;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_set",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
