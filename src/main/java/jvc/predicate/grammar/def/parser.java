
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package jvc.predicate.grammar.def;

import java_cup.runtime.*;
import jvc.predicate.engine.evaluator.impl.arithmetic.*;
import jvc.predicate.engine.evaluator.impl.comparation.*;
import jvc.predicate.engine.evaluator.impl.logic.*;
import jvc.predicate.engine.evaluator.impl.runtime.*;
import jvc.predicate.engine.evaluator.*;
import jvc.predicate.engine.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\007\003\000\002\006" +
    "\003\000\002\006\005\000\002\010\003\000\002\010\011" +
    "\000\002\011\003\000\002\011\011\000\002\022\003\000" +
    "\002\022\005\000\002\023\003\000\002\023\005\000\002" +
    "\012\003\000\002\012\004\000\002\014\003\000\002\014" +
    "\005\000\002\015\003\000\002\015\005\000\002\020\003" +
    "\000\002\020\005\000\002\003\003\000\002\003\003\000" +
    "\002\016\003\000\002\016\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\013" +
    "\003\000\002\013\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\017\003\000" +
    "\002\017\005\000\002\021\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\006\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\025\003\000\002\025\005\000\002\024\003\000" +
    "\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\024\004\011\005\004\006\016\007\017\010" +
    "\006\011\020\016\007\034\013\041\010\001\002\000\050" +
    "\002\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\034\uffd7\035\uffd7\040\uffd7\001" +
    "\002\000\050\002\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\034\uffdd\035\uffdd" +
    "\040\uffdd\001\002\000\004\036\114\001\002\000\020\004" +
    "\011\005\004\006\016\007\017\016\007\034\013\041\010" +
    "\001\002\000\050\002\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\034\uffd9\035" +
    "\uffd9\040\uffd9\001\002\000\050\002\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\034\uffd8\035\uffd8\040\uffd8\001\002\000\004\002\112\001" +
    "\002\000\024\004\011\005\004\006\016\007\017\010\006" +
    "\011\020\016\007\034\013\041\010\001\002\000\014\002" +
    "\ufff9\012\036\013\ufff9\035\ufff9\040\ufff9\001\002\000\050" +
    "\002\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\034\042\035\uffdf\040\uffdf\001" +
    "\002\000\050\002\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\034\uffd6\035\uffd6" +
    "\040\uffd6\001\002\000\050\002\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\034" +
    "\uffd5\035\uffd5\040\uffd5\001\002\000\004\036\074\001\002" +
    "\000\006\002\000\040\045\001\002\000\010\002\ufffd\035" +
    "\ufffd\040\ufffd\001\002\000\044\002\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\017\066\020\070\022\071\023\067\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\035\uffeb" +
    "\040\uffeb\001\002\000\034\002\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\024\060\025\063\026\061\027\064\030\uffef" +
    "\031\uffef\035\uffef\040\uffef\001\002\000\024\002\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\030\054\031\056\035\ufff1" +
    "\040\ufff1\001\002\000\020\002\ufff3\012\ufff3\013\ufff3\014" +
    "\052\015\ufff3\035\ufff3\040\ufff3\001\002\000\016\002\ufff5" +
    "\012\ufff5\013\ufff5\015\050\035\ufff5\040\ufff5\001\002\000" +
    "\046\002\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\040\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\035\uffe5\040\uffe5\001\002" +
    "\000\010\002\uffff\035\uffff\040\uffff\001\002\000\012\002" +
    "\ufffb\013\034\035\ufffb\040\ufffb\001\002\000\014\002\ufff7" +
    "\012\ufff7\013\ufff7\035\ufff7\040\ufff7\001\002\000\020\004" +
    "\011\005\004\006\016\007\017\016\007\034\013\041\010" +
    "\001\002\000\014\002\ufff8\012\036\013\ufff8\035\ufff8\040" +
    "\ufff8\001\002\000\020\004\011\005\004\006\016\007\017" +
    "\016\007\034\013\041\010\001\002\000\014\002\ufff6\012" +
    "\ufff6\013\ufff6\035\ufff6\040\ufff6\001\002\000\016\004\011" +
    "\005\004\006\016\007\017\034\013\041\010\001\002\000" +
    "\050\002\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\034\042\035\uffde\040\uffde" +
    "\001\002\000\026\004\011\005\004\006\016\007\017\010" +
    "\006\011\020\016\007\034\013\035\044\041\010\001\002" +
    "\000\006\035\046\040\045\001\002\000\050\002\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\034\uffdc\035\uffdc\040\uffdc\001\002\000\024" +
    "\004\011\005\004\006\016\007\017\010\006\011\020\016" +
    "\007\034\013\041\010\001\002\000\050\002\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\034\uffda\035\uffda\040\uffda\001\002\000\010\002" +
    "\ufffe\035\ufffe\040\ufffe\001\002\000\016\004\011\005\004" +
    "\006\016\007\017\034\013\041\010\001\002\000\020\002" +
    "\ufff2\012\ufff2\013\ufff2\014\052\015\ufff2\035\ufff2\040\ufff2" +
    "\001\002\000\016\004\011\005\004\006\016\007\017\034" +
    "\013\041\010\001\002\000\024\002\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\030\054\031\056\035\ufff0\040\ufff0\001" +
    "\002\000\016\004\uffed\005\uffed\006\uffed\007\uffed\034\uffed" +
    "\041\uffed\001\002\000\016\004\011\005\004\006\016\007" +
    "\017\034\013\041\010\001\002\000\016\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\034\uffec\041\uffec\001\002\000\034\002" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\024\060\025\063" +
    "\026\061\027\064\030\uffee\031\uffee\035\uffee\040\uffee\001" +
    "\002\000\016\004\uffe9\005\uffe9\006\uffe9\007\uffe9\034\uffe9" +
    "\041\uffe9\001\002\000\016\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\034\uffe7\041\uffe7\001\002\000\016\004\011\005\004" +
    "\006\016\007\017\034\013\041\010\001\002\000\016\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\034\uffe8\041\uffe8\001\002" +
    "\000\016\004\uffe6\005\uffe6\006\uffe6\007\uffe6\034\uffe6\041" +
    "\uffe6\001\002\000\044\002\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\017\066\020\070\022\071\023\067\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\035\uffea\040\uffea" +
    "\001\002\000\016\004\uffe3\005\uffe3\006\uffe3\007\uffe3\034" +
    "\uffe3\041\uffe3\001\002\000\016\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\034\uffe1\041\uffe1\001\002\000\016\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\034\uffe0\041\uffe0\001\002\000\016" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\034\uffe2\041\uffe2\001" +
    "\002\000\016\004\011\005\004\006\016\007\017\034\013" +
    "\041\010\001\002\000\046\002\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\021\040\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\035" +
    "\uffe4\040\uffe4\001\002\000\004\041\075\001\002\000\006" +
    "\033\uffd4\040\uffd4\001\002\000\006\033\100\040\077\001" +
    "\002\000\004\041\107\001\002\000\004\043\102\001\002" +
    "\000\006\037\104\040\103\001\002\000\006\037\uffd2\040" +
    "\uffd2\001\002\000\004\043\106\001\002\000\022\004\011" +
    "\005\004\006\016\007\017\011\020\016\007\034\013\041" +
    "\010\001\002\000\010\002\ufffa\035\ufffa\040\ufffa\001\002" +
    "\000\006\037\uffd1\040\uffd1\001\002\000\006\033\uffd3\040" +
    "\uffd3\001\002\000\006\035\111\040\045\001\002\000\050" +
    "\002\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\034\uffdb\035\uffdb\040\uffdb\001" +
    "\002\000\004\002\001\001\002\000\014\002\ufff4\012\ufff4" +
    "\013\ufff4\035\ufff4\040\ufff4\001\002\000\004\041\075\001" +
    "\002\000\006\033\116\040\077\001\002\000\004\043\102" +
    "\001\002\000\006\037\120\040\103\001\002\000\024\004" +
    "\011\005\004\006\016\007\017\010\006\011\020\016\007" +
    "\034\013\041\010\001\002\000\010\002\ufffc\035\ufffc\040" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\040\005\004\006\020\007\011\010\030\011" +
    "\021\012\032\013\022\014\026\015\025\016\023\017\027" +
    "\020\024\021\014\022\031\023\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\004" +
    "\012\112\013\022\014\026\015\025\016\023\017\027\020" +
    "\024\021\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\004\006\107\010\030\011" +
    "\021\012\032\013\022\014\026\015\025\016\023\017\027" +
    "\020\024\021\014\022\031\023\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\071\001\001\000\004\002\061\001\001\000\004" +
    "\003\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\004\012\032\013\022\014\026\015" +
    "\025\016\023\017\027\020\024\021\014\023\034\001\001" +
    "\000\002\001\001\000\024\005\004\012\036\013\022\014" +
    "\026\015\025\016\023\017\027\020\024\021\014\001\001" +
    "\000\002\001\001\000\006\005\004\021\040\001\001\000" +
    "\002\001\001\000\036\005\004\006\042\010\030\011\021" +
    "\012\032\013\022\014\026\015\025\016\023\017\027\020" +
    "\024\021\014\022\031\023\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\004\010\046\011\021\012" +
    "\032\013\022\014\026\015\025\016\023\017\027\020\024" +
    "\021\014\022\031\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\004\013\022\015\050\016\023" +
    "\017\027\020\024\021\014\001\001\000\002\001\001\000" +
    "\016\005\004\013\022\016\023\017\027\020\052\021\014" +
    "\001\001\000\004\003\054\001\001\000\002\001\001\000" +
    "\014\005\004\013\022\016\056\017\027\021\014\001\001" +
    "\000\002\001\001\000\004\002\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\004\013\064\017\027" +
    "\021\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\004\017" +
    "\072\021\014\001\001\000\002\001\001\000\004\025\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\004\011\104\012" +
    "\032\013\022\014\026\015\025\016\023\017\027\020\024" +
    "\021\014\022\031\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\114\001\001\000\002\001\001\000\004\024\116\001\001" +
    "\000\002\001\001\000\034\005\004\010\120\011\021\012" +
    "\032\013\022\014\026\015\025\016\023\017\027\020\024" +
    "\021\014\022\031\023\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private PredicateLogic predicateLogic;

    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, PredicateLogic pl) {
        super(s,sf);
        this.predicateLogic = pl;
    }

    public PredicateLogic getPredicateLogic(){return predicateLogic;}


    public void report_error(String s, Object o){
        EvaluatorBuilder.addError(s, o, predicateLogic);
    }

    public void report_fatal_error(String s, Object o){
        report_error(s, o);
    }

    protected void report_expected_token_ids(){
    
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Evaluator start_val = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= expression 
            {
              Evaluator RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator e = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (e!=null) predicateLogic.setEvaluatorResult(e.eval());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= forall_expression 
            {
              Evaluator RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator loe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = loe;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= expression COMA forall_expression 
            {
              Evaluator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator a = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator b = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArgumentEvaluator ae;

        if (a instanceof ArgumentEvaluator){
            ae = (ArgumentEvaluator)a;
            ae.add(b);

        }else{
            ae = new ArgumentEvaluator();
            ae.add(a);
            ae.add(b);
        }

        RESULT = ae;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // forall_expression ::= exists_expression 
            {
              Evaluator RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ee = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ee; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forall_expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // forall_expression ::= FORALL A_LLAVES parameter DOS_PUNTOS parameter_set C_LLAVES forall_expression 
            {
              Evaluator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		java.util.ArrayList<String> p = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location fexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location fexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator fe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.evalForall(p, ps, fe, predicateLogic);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forall_expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exists_expression ::= if_only_if_expression 
            {
              Evaluator RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exists_expression ::= EXIST A_LLAVES parameter DOS_PUNTOS parameter_set C_LLAVES exists_expression 
            {
              Evaluator RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		java.util.ArrayList<String> p = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ex = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.evalExist(p, ps, ex, predicateLogic);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // if_only_if_expression ::= if_then_expression 
            {
              Evaluator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator a = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_only_if_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // if_only_if_expression ::= if_only_if_expression IF_ONLY_IF if_then_expression 
            {
              Evaluator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator a = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator b = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.evalBiConditional(a, b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_only_if_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if_then_expression ::= logical_not_expression 
            {
              Evaluator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator a = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if_then_expression ::= if_then_expression IF_THEN logical_not_expression 
            {
              Evaluator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator a = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator b = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.evalConditional(a, b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // logical_not_expression ::= logical_or_expression 
            {
              Evaluator RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator loe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = loe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_not_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // logical_not_expression ::= NOT logical_not_expression 
            {
              Evaluator RESULT =null;
		Location lnexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lnexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lne = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = EvaluatorBuilder.eval( EvaluatorBuilder.notEval(), lne ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_not_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // logical_or_expression ::= logical_and_expression 
            {
              Evaluator RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              Evaluator RESULT =null;
		Location loexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location loexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator loe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval( loe, EvaluatorBuilder.orEval(), lae );
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // logical_and_expression ::= equality_expression 
            {
              Evaluator RESULT =null;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ioe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ioe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // logical_and_expression ::= logical_and_expression AND equality_expression 
            {
              Evaluator RESULT =null;
		Location laexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location laexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator lae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ioexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ioexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ioe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval( lae, EvaluatorBuilder.andEval(), ioe );
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // equality_expression ::= relational_expression 
            {
              Evaluator RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator re = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = re; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // equality_expression ::= equality_expression equality_op relational_expression 
            {
              Evaluator RESULT =null;
		Location eexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location eexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator ee = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		BinaryEvaluator op = (BinaryEvaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator re = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval(ee, op, re);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // equality_op ::= EQUAL_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.equalEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // equality_op ::= NOT_EQUAL_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.notEqualEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_op",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relational_expression ::= additive_expression 
            {
              Evaluator RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relational_expression ::= relational_expression relational_op additive_expression 
            {
              Evaluator RESULT =null;
		Location rexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location rexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator re = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		BinaryEvaluator op = (BinaryEvaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location sexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location sexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator se = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval(re, op, se);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relational_op ::= LT_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.ltEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relational_op ::= GT_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.gtEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // relational_op ::= LE_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.leEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // relational_op ::= GE_OP 
            {
              BinaryEvaluator RESULT =null;
		  RESULT =  EvaluatorBuilder.geEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // additive_expression ::= multiplicative_expression 
            {
              Evaluator RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator me = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // additive_expression ::= additive_expression additive_op multiplicative_expression 
            {
              Evaluator RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator ae = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		BinaryEvaluator op = (BinaryEvaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator me = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT  = EvaluatorBuilder.eval(ae, op, me);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // additive_op ::= PLUS_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.plusEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // additive_op ::= DIV_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.divEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // additive_op ::= MOD_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.modEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // additive_op ::= MINUS_OP 
            {
              BinaryEvaluator RESULT =null;
		 RESULT = EvaluatorBuilder.minusEval(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multiplicative_expression ::= postfix_expression 
            {
              Evaluator RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator pe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multiplicative_expression ::= multiplicative_expression TIME_OP postfix_expression 
            {
              Evaluator RESULT =null;
		Location mexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location mexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator me = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location cexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator ce = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT  = EvaluatorBuilder.eval(me, EvaluatorBuilder.timeEval() , ce);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // postfix_expression ::= primary_expression 
            {
              Evaluator RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Evaluator pe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = pe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // postfix_expression ::= postfix_expression AP_CURVO CP_CURVO 
            {
              Evaluator RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Evaluator a = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // postfix_expression ::= AP_CURVO expression CP_CURVO 
            {
              Evaluator RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Evaluator e = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // postfix_expression ::= postfix_expression AP_CURVO expression CP_CURVO 
            {
              Evaluator RESULT =null;
		Location pexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location pexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Evaluator pe = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Evaluator e = (Evaluator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = EvaluatorBuilder.maybeFunction( pe, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primary_expression ::= IDENTIFIER 
            {
              Evaluator RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = EvaluatorBuilder.eval(id, predicateLogic);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primary_expression ::= INT_NUMBER 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primary_expression ::= FLOAT_NUMBER 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primary_expression ::= BOOLEAN 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primary_expression ::= STRING 
            {
              Evaluator RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = EvaluatorBuilder.eval(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter ::= IDENTIFIER 
            {
              java.util.ArrayList<String> RESULT =null;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new java.util.ArrayList<String>(){{add(sn);}};
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameter ::= parameter COMA IDENTIFIER 
            {
              java.util.ArrayList<String> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ps.add(sn);
        RESULT = ps;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameter_set ::= SETNAME 
            {
              java.util.ArrayList<String> RESULT =null;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new java.util.ArrayList<String>(){{add(sn);}};
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_set",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameter_set ::= parameter_set COMA SETNAME 
            {
              java.util.ArrayList<String> RESULT =null;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		java.util.ArrayList<String> ps = (java.util.ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ps.add(sn);
        RESULT = ps;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_set",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
